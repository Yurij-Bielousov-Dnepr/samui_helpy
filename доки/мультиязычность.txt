Укр, тайский, Английский, французский, итальянский, немецкий и рус
Библиотека i18n в Django является встроенным инструментом для локализации текстовых сообщений, меток полей, и других элементов, которые отображаются на веб-страницах. Благодаря этой библиотеке, разработчики могут легко поддерживать несколько языков в своих приложениях без необходимости создания дополнительных таблиц в базе данных.

Пример использования i18n:

Вам нужно добавить необходимые языки в файл настроек settings.py. Например, чтобы добавить русский язык, вы можете использовать следующий код:
python

# settings.py
...
LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Russian'),
]
...
Создайте файл перевода для каждого языка, который вы хотите поддерживать. Например, для русского языка вы можете создать файл locale/ru/LC_MESSAGES/django.po. Этот файл должен содержать переводы для всех строк, которые вы хотите перевести на русский язык.

Используйте функцию gettext() в шаблонах Django для получения перевода для конкретной строки. Например:

html

<!-- template.html -->
{% load i18n %}
...
<h1>{% trans "Hello, world!" %}</h1>
...
Функция trans переводит строку "Hello, world!" на текущий язык пользователя, определенный в запросе.

Наконец, запустите утилиту compilemessages для компиляции файлов перевода в формат, который может быть использован вашим приложением. Например:


python manage.py compilemessages
Это простой пример использования i18n в Django. Библиотека i18n предоставляет более продвинутые возможности, такие как форматирование дат и чисел в соответствии с языковыми правилами, и многие другие.




gakayur@gmail.com
пример settings.py на 3 языка укр ру англ 
Вот пример файла settings.py для поддержки украинского, русского и английского языков:

python
Copy code
# settings.py
...
LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('uk', 'Ukrainian'),
    ('ru', 'Russian'),
    ('en', 'English'),
]

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
...
В этом примере мы указываем английский язык как язык по умолчанию, и добавляем украинский и русский языки в список LANGUAGES.
 Затем мы включаем локализацию (i18n) и форматирование дат и чисел (l10n), и указываем местоположение 
файлов перевода (locale) в нашем проекте. Файлы перевода для каждого языка будут храниться в директории 
locale/<language_code>/LC_MESSAGES/.




gakayur@gmail.com
пример файлов locale для этих 3 языков с 10 словами
Вот пример файлов перевода для трех языков (украинский, русский и английский) с 10 словами:

Файлы перевода для украинского языка (locale/uk/LC_MESSAGES/django.po):

po
Copy code
msgid "Hello"
msgstr "Привіт"

msgid "Goodbye"
msgstr "До побачення"

msgid "Welcome"
msgstr "Ласкаво просимо"

msgid "Search"
msgstr "Пошук"

msgid "Login"
msgstr "Увійти"

msgid "Logout"
msgstr "Вийти"

msgid "Profile"
msgstr "Профіль"

msgid "Settings"
msgstr "Налаштування"

msgid "Save"
msgstr "Зберегти"

msgid "Cancel"
msgstr "Скасувати"
Файлы перевода для русского языка (locale/ru/LC_MESSAGES/django.po):

po
Copy code
msgid "Hello"
msgstr "Привет"

msgid "Goodbye"
msgstr "До свидания"

msgid "Welcome"
msgstr "Добро пожаловать"

msgid "Search"
msgstr "Поиск"

msgid "Login"
msgstr "Войти"

msgid "Logout"
msgstr "Выйти"

msgid "Profile"
msgstr "Профиль"

msgid "Settings"
msgstr "Настройки"

msgid "Save"
msgstr "Сохранить"

msgid "Cancel"
msgstr "Отмена"
Файлы перевода для английского языка (locale/en/LC_MESSAGES/django.po):

po
Copy code
msgid "Hello"
msgstr "Hello"

msgid "Goodbye"
msgstr "Goodbye"

msgid "Welcome"
msgstr "Welcome"

msgid "Search"
msgstr "Search"

msgid "Login"
msgstr "Login"

msgid "Logout"
msgstr "Logout"

msgid "Profile"
msgstr "Profile"

msgid "Settings"
msgstr "Settings"

msgid "Save"
msgstr "Save"

msgid "Cancel"
msgstr "Cancel"
Эти файлы перевода могут быть скомпилированы с помощью утилиты compilemessages 
для использования в Django приложении.
compilemessages - это утилита командной строки Django, которая компилирует файлы перевода из формата PO в формат MO, который используется Django для локализации.

Для того, чтобы использовать переводы на сайте, необходимо скомпилировать файлы перевода с помощью утилиты compilemessages. Сначала вы должны создать файлы перевода на нужные языки, как описано выше. Затем, когда вы внесете изменения в эти файлы, вы можете использовать утилиту compilemessages для создания файлов MO, которые Django использует для локализации.

Чтобы скомпилировать файлы перевода, сначала убедитесь, что в вашем settings.py установлен путь к директории locale:

python
Copy code
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]
Затем перейдите в директорию вашего проекта, где находится manage.py, и выполните следующую команду в командной строке:

Copy code
python manage.py compilemessages
Это создаст файлы MO в директории locale/<language_code>/LC_MESSAGES/ для каждого языка, указанного в LANGUAGES в вашем settings.py.

Теперь Django будет использовать переводы из этих файлов приложения, чтобы выводить текст на нужном языке в зависимости от выбранного пользователем языка интерфейса.
PO-файлы (Portable Object) - это текстовые файлы, содержащие переводы на конкретный язык для заданной локали. PO-файлы можно создавать вручную с помощью текстовых редакторов, либо автоматически с помощью специализированных инструментов, например, с помощью Django-команды makemessages.

Для генерации PO-файлов в Django используется утилита командной строки makemessages. Она сканирует исходный код проекта в поисках строк, которые должны быть переведены, и создает PO-файлы для каждого языка, указанного в настройках проекта.

Пример команды для генерации PO-файлов для всех языков, указанных в вашем settings.py:

css
Copy code
python manage.py makemessages -a
Эта команда создаст PO-файлы для всех языков, указанных в вашем settings.py, в директории locale/<language_code>/LC_MESSAGES/. После редактирования этих файлов переводов, вы можете скомпилировать их в MO-файлы с помощью утилиты compilemessages